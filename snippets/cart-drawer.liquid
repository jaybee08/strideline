<!-- HTML for the cart drawer -->
<div class="cart-drawer-wrapper">
  <div id="cart-drawer" class="cart-drawer">
    <div class="cart-header">
        <h2>Your Cart (<span class="cart-count"></span>)</h2>
        <button class="close-btn" onclick="closeCartDrawer()">
          <svg width="10" viewBox="0 0 10 10"><path d="M9.677 8.118a1.102 1.102 0 11-1.559 1.56L5 6.558 1.882 9.677a1.102 1.102 0 11-1.56-1.559L3.442 5 .323 1.882A1.102 1.102 0 111.882.322L5 3.442 8.118.323a1.102 1.102 0 111.56 1.559L6.558 5l3.118 3.118z" fill="#A1A1A1" fill-rule="nonzero"></path></svg>
        </button>
    </div>

    <div class="main-cart-drawer">
      <div class="loader" style="display:none">
          <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="48px" height="48px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
          <g transform="rotate(0 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.9166666666666666s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(30 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.8333333333333334s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(60 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.75s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(90 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.6666666666666666s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(120 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.5833333333333334s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(150 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.5s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(180 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.4166666666666667s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(210 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.3333333333333333s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(240 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.25s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(270 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.16666666666666666s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(300 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.08333333333333333s" repeatCount="indefinite"></animate>
            </rect>
          </g><g transform="rotate(330 50 50)">
            <rect x="47" y="24" rx="3" ry="6" width="6" height="12" fill="#000000">
              <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="0s" repeatCount="indefinite"></animate>
            </rect>
          </g>
        </svg>
      </div>
      <div class="cart-items" id="cart-items">
          <!-- Cart items will be dynamically populated here -->
      </div>
      <div class="cart-footer">
        <div class="flex">
          <div class="shipping">Shipping</div>
          <div class="shipping-cost"><span>Calculated at checkout</span></div>
        </div>
        <div class="flex">
          <div class="s-total">Subtotal:</div>
          <span id="cart-total" class="cart-total"></span>
        </div>
        <div class="flex">
          <a href="/checkout" class="btn">Checkout</a>
        </div>
      </div>
    </div>

  </div>
</div>


<!-- JavaScript to handle cart functionality -->
<script>
  // Function to open the cart drawer
  function openCartDrawer() {
      document.getElementById("cart-drawer").classList.add("open");
      document.querySelector(".cart-drawer-wrapper").classList.add("open");
      document.body.addEventListener('click', handleOutsideClick);
  }

  // Function to close the cart drawer
  function closeCartDrawer() {
      document.getElementById("cart-drawer").classList.remove("open");
      document.querySelector(".cart-drawer-wrapper").classList.remove("open");
      document.body.removeEventListener('click', handleOutsideClick);
  }

  // Function to handle clicks outside the cart drawer
  function handleOutsideClick(event) {
    const cartDrawer = document.getElementById("cart-drawer");
    const cartDrawerWrapper = document.querySelector(".cart-drawer-wrapper .open");
      if (!cartDrawer.contains(event.target) && !cartDrawerWrapper.contains(event.target)) {
          closeCartDrawer();
      }
  }

  // Function to update the cart drawer with latest cart items and total
  function updateCartDrawer() {
    fetch('/cart.js')
        .then(response => response.json())
        .then(data => {
            const cartItems = data.items;
            const cartTotal = data.total_price;
            const cartItemsContainer = document.getElementById("cart-items");
            const cartTotalElement = document.getElementById("cart-total");
            const cartCountElement = document.querySelector(".cart-count");

            cartItemsContainer.innerHTML = ''; // Clear existing cart items
            cartCountElement.textContent = `${data.item_count}`; // Update cart count

            // Populate cart items
            cartItems.forEach(item => {
                const itemElement = document.createElement("div");
                itemElement.classList.add('cart-item');
                itemElement.setAttribute('data-cart-item', item.variant_id);

                const itemPrice = item.price;

                itemElement.innerHTML = `
                <div class="cart-flex">
                  <button id="item-remove" class="item-remove" data-item-id="${item.id}">
                    <svg width="9" viewBox="0 0 10 10"><path d="M9.677 8.118a1.102 1.102 0 11-1.559 1.56L5 6.558 1.882 9.677a1.102 1.102 0 11-1.56-1.559L3.442 5 .323 1.882A1.102 1.102 0 111.882.322L5 3.442 8.118.323a1.102 1.102 0 111.56 1.559L6.558 5l3.118 3.118z" fill="#cacaca" fill-rule="nonzero"></path></svg>
                  </button>
                  <img alt="${item.title}" width="90" height="90" src="${item.image}">
                  <a href="${item.url}">
                    <p>${item.title}</p>
                  </a>
                </div>
                <div class="cart-flex">
                  <div class="quantity-selector">
                    <button class="down" aria-label="decrease" data-item-id="${item.id}">
                      <svg width="10" viewBox="0 0 12 2" xmlns="http://www.w3.org/2000/svg"><path d="M11.25 0H.75C.3 0 0 .4 0 1s.3 1 .75 1h10.5c.45 0 .75-.4.75-1s-.3-1-.75-1z" fill="#7A7A7A" fill-rule="nonzero"></path></svg>
                    </button>
                      <input type="text" id="quantity-${item.id}" data-item-id="${item.id}" value="${item.quantity}">
                      <button class="up" aria-label="increase" data-item-id="${item.id}">
                        <svg width="10" viewBox="0 0 12 12" xmlns="http://www.w3.org/2000/svg"><path d="M11 5H7V1a1 1 0 00-2 0v4H1a1 1 0 000 2h4v4a1 1 0 002 0V7h4a1 1 0 000-2z" fill="currentColor" fill-rule="nonzero"></path></svg>
                      </button>
                  </div>
                    <span class="price" data-item-id="${item.id}">$${(itemPrice / 100).toFixed(2)}</span>
                </div>
                `;
                cartItemsContainer.appendChild(itemElement);

            });

            // Update total
            cartTotalElement.textContent = `$${(cartTotal / 100).toFixed(2)}`;

            if (cartItems.lenght == 0) {
              cartItemsContainer.remove();
            }
            
            openCartDrawer(); // Open the cart drawer
            minQuantity(data);
        })
        .catch(error => console.error('Error fetching cart data:', error));
  }

  // Function to update the quantity when the up button is clicked
  function increaseQuantity(itemId) {
    const quantityInput = document.querySelector(`#quantity-${itemId}`);
    const newQuantity = parseInt(quantityInput.value) + 1;
    quantityInput.value = newQuantity; // Update the quantity in the input field
    updateQuantity(itemId, newQuantity); // Update the quantity in the cart
  }

  // Function to update the quantity when the down button is clicked
  function decreaseQuantity(itemId) {
      const quantityInput = document.querySelector(`#quantity-${itemId}`);
      let newQuantity = parseInt(quantityInput.value) - 1;
      newQuantity = Math.max(newQuantity, 0); // Ensure quantity doesn't go below 0

      if (newQuantity === 0) {
          // If the quantity becomes 0, remove the item from the cart
          removeItem(itemId);
      } else {
          quantityInput.value = newQuantity; 
          updateQuantity(itemId, newQuantity);
      }
  }

  // Function to handle changes in quantity and price
  function updateQuantity(itemId, newQuantity) {
    const cartCountElement = document.querySelector(".cart-count"); // Added
    const loaderElement = document.querySelector('.loader');
    loaderElement.style.display = 'block'; // Display loader
    fetch('/cart/change.js', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            id: itemId,
            quantity: newQuantity
        })
    })
    .then(response => response.json())
    .then(data => {

        // Update cart count
        cartCountElement.textContent = `${data.item_count}`; // Update cart count
        const updatedItem = data.items.find(item => item.id == itemId); // Find the updated item in the cart data
        
        if (updatedItem) {
            const updatedPrice = updatedItem.price; // Get the updated price for the item
            const cartTotal = data.total_price;
            const cartTotalElement = document.getElementById("cart-total");
            const cartItemsContainer = document.getElementById("cart-items");
            const MenuCartIcon = document.querySelector('.tt-badge-cart');

            // Update the price and total in the cart drawer
            cartTotalElement.textContent = `$${(cartTotal / 100).toFixed(2)}`;
            const itemElement = document.querySelector(`.cart-item[data-cart-item="${itemId}"]`);
            console.log('cart icon count:', data.item_count);
            if (itemElement) {
              // itemElement.querySelector(".price").textContent = `$${(updatedPrice / 100).toFixed(2)}`;
              const quantity = parseInt(document.querySelector(`#quantity-${itemId}`).value);
              const totalPrice = (updatedPrice * quantity) / 100; // Calculate the total price

              itemElement.querySelector(`.price[data-item-id="${itemId}"]`).textContent = `$${totalPrice.toFixed(2)}`; // Update the displayed price

              MenuCartIcon.textContent = data.item_count;
            }

            loaderElement.style.display = 'none'; 

              minQuantity(data);

        }
    })
    .catch(error => console.error('Error updating quantity:', error));
  }

   // Function to remove the item from the cart
  function removeItem(itemId) {
    const loaderElement = document.querySelector('.loader');
    loaderElement.style.display = 'block'; // Display loader

    fetch('/cart/change.js', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            id: itemId,
            quantity: 0 // Set quantity to 0 to remove the item
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        // Remove the item element from the cart drawer
        const itemElement = document.querySelector(`#cart-items .cart-item[data-item-id="${itemId}"]`);
        const cartFooterElement = document.querySelector(`.cart-footer`);
        if (itemElement) {
            itemElement.remove();
        }
        updateCartDrawer(); // Update the cart drawer with the latest data
        updateCartCount(); // Update the cart count

        if(data.item_count <= 3) {
            cartFooterElement.classList.add('sticky');
        } else {
            cartFooterElement.classList.remove('sticky');
        }

        // Hide the loader once the removal process is complete
        loaderElement.style.display = 'none'; // Hide loader
    })
    .catch(error => {
        console.error('Error removing item:', error);
        // Hide the loader in case of an error
        loaderElement.style.display = 'none'; // Hide loader
    });
    
  }

  // Function to update the cart count
  function updateCartCount() {
    const cartCountElement = document.querySelector('.tt-badge-cart');
    fetch('/cart.js')
        .then(response => response.json())
        .then(data => {
            cartCountElement.textContent = `${data.item_count}`; // Update the cart count
            const cartMain = document.querySelector(".main-cart-drawer");
            if(data.item_count == 0) {
              cartMain.style.opacity = '0';
              console.log('show empty message');
            }
        })
        .catch(error => console.error('Error updating cart count:', error));
  }

  function minQuantity(data) {
    const checkoutBtn = document.querySelector('.main-cart-drawer a.btn')
    const cartHeaderElement = document.querySelector('.cart-header');
    const existingSpanElement = cartHeaderElement.querySelector('.quantity-error');
    
    // Function to check and update the visibility of the error message span
    function updateErrorMessageVisibility() {
      const existingSpanElement = cartHeaderElement.querySelector('.quantity-error');

      if (!existingSpanElement && data.item_count < 96) {
          const newSpanElement = document.createElement('span');
          newSpanElement.classList.add('quantity-error');
          newSpanElement.setAttribute('style', 'color:red;display:flex;align-items:center');
          const minQuantityText = newSpanElement.innerHTML = `
          <svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M7.9987 15.1667C11.6806 15.1667 14.6654 12.1819 14.6654 8.50001C14.6654 4.81811 11.6806 1.83334 7.9987 1.83334C4.3168 1.83334 1.33203 4.81811 1.33203 8.50001C1.33203 12.1819 4.3168 15.1667 7.9987 15.1667ZM7.4987 5.66668C7.4987 5.39334 7.72536 5.16668 7.9987 5.16668C8.27203 5.16668 8.4987 5.39334 8.4987 5.66668V9.16668C8.4987 9.44001 8.27203 9.66668 7.9987 9.66668C7.72536 9.66668 7.4987 9.44001 7.4987 9.16668V5.66668ZM8.61203 11.5867C8.5787 11.6667 8.53203 11.74 8.47203 11.8067C8.34536 11.9333 8.1787 12 7.9987 12C7.91203 12 7.82536 11.98 7.74536 11.9467C7.6587 11.9133 7.59203 11.8667 7.52536 11.8067C7.46536 11.74 7.4187 11.6667 7.3787 11.5867C7.34536 11.5067 7.33203 11.42 7.33203 11.3333C7.33203 11.16 7.3987 10.9867 7.52536 10.86C7.59203 10.8 7.6587 10.7533 7.74536 10.72C7.99203 10.6133 8.28536 10.6733 8.47203 10.86C8.53203 10.9267 8.5787 10.9933 8.61203 11.08C8.64536 11.16 8.66536 11.2467 8.66536 11.3333C8.66536 11.42 8.64536 11.5067 8.61203 11.5867Z" fill="#BC2626"/>
          </svg>
          <span style="margin-left:2px;font-size:13px">The order quantity is below the minimum requirement of 96 items.</span>`;
          cartHeaderElement.appendChild(newSpanElement);
          checkoutBtn.setAttribute('style', 'pointer-events:none;cursor:not-allowed;opacity:0.5');
      } else if (existingSpanElement && data.item_count >= 96) {
          existingSpanElement.remove();
          checkoutBtn.setAttribute('style', '');
      }
    }

    // Call the function to initially check the visibility of the error message span
    updateErrorMessageVisibility();
  }

   // Function to fetch cart data
   function fetchCartData() {
    const cartCountElement = document.querySelector('.tt-badge-cart');
    fetch('/cart.js')
        .then(response => response.json())
        .then(data => {
            cartCountElement.textContent = `${data.item_count}`; // Update the cart count
            const cartMain = document.querySelector(".main-cart-drawer");
            if(data.item_count == 0) {
              cartMain.style.opacity = '0';
              console.log('show empty message');
            }
            minQuantity(data);
        })
        .catch(error => console.error('Error updating cart count:', error));
  }

  // Event listener to open cart drawer when cart icon is clicked
  document.getElementById("cart-icon").addEventListener("click", updateCartDrawer);

  // Event delegation for handling changes in quantity
  document.getElementById("cart-items").addEventListener("click", function(event) {
    const targetButton = event.target.closest("button");
    if (!targetButton) return; // Exit if clicked element is not a button
    
    const itemId = targetButton.dataset.itemId;
    if (!itemId) return; // Exit if item ID is not found
    
    if (targetButton.classList.contains("up")) {
        increaseQuantity(itemId);
    } else if (targetButton.classList.contains("down")) {
        decreaseQuantity(itemId);
    } else if (targetButton.classList.contains("item-remove")) {
        removeItem(itemId);
    }    
  });

  // Prevent slidecart from flickering on page load
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
      document.getElementById('cart-drawer').classList.add('transition');
    }, 1000);
    fetchCartData(); // fetch data on page load 
  });

  document.addEventListener('change', function(event) {
    const targetInput = event.target.closest("input");
    let newQuantity = parseInt(targetInput.value);

    if (!targetInput) return; 
    
    const itemId = targetInput.dataset.itemId;
    if (!itemId) return;
    updateQuantity(itemId, newQuantity);
    if (newQuantity == 0) {
      removeItem(itemId);
    }
  });

</script>

<!-- CSS for styling the cart drawer -->
<style>

  .cart-drawer-wrapper.open {
    position: fixed;
    width: 100%;
    display: block;
    background: rgba(0,0,0,0.5);
    top: 0;
    height: 100%;
    z-index: 21;
  }

  .cart-drawer {
      position: fixed;
      top: 0;
      right: 0;
      width: 440px;
      height: 100%;
      background-color: white;
      box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
      transform: translateX(100%);
      
      z-index: 10;
      overflow-y: scroll;
  }

  .cart-drawer.transition {
    transition: transform 0.3s ease-in-out;
  }

  .cart-drawer.open {
      transform: translateX(0);
  }

  .cart-drawer::-webkit-scrollbar {
    width: 0;
  }

  .cart-drawer.is-empty .cart-items {
    display: none;
  }

  .cart-drawer.is-empty .cart-items {
    display: none;
  }

  .cart-drawer .main-cart-drawer {
    transition: opacity 0.5s ease-in-out;
    position: relative;
  }

  .cart-drawer .main-cart-drawer .loader {
    display: block;
    position: absolute;
    top: 0;
    background: #fff;
    width: 100%;
    height: 100%;
    z-index: 1;
    opacity: 0.8;
  }

  .cart-drawer .main-cart-drawer .loader svg {
    margin-top: 75%!important;
  }

  .cart-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
  }

  .cart-header h2 {
    padding-bottom: 0!important;
    font-size: 24px!important;
  }

  .cart-items {
    min-height: 650px;
    height: 100%;
  }
  .cart-items .cart-item {
    padding: 0 0 35px 0;
    margin: 1rem 0;
    border-bottom: 1px solid #eee;
    position: relative;
  }

  .cart-items .cart-item:last-child {
    border-bottom: none;
  }

  .cart-items .cart-item .cart-flex a {
    padding-left: 1rem;
    padding-right: 2.2rem;
    font-weight: bold;
    color: #000000;
    font-size: 1rem;
  }

  .cart-items .cart-item .cart-flex a:hover {
    text-decoration: underline;
  }

  .cart-items .cart-item .cart-flex .quantity-input {
    width: 50px;
  }

  .cart-items .cart-item .cart-flex .quantity-selector {
    display: flex;
    justify-content: center;
    margin-left: -18px;
  }

  .cart-items .cart-item .cart-flex .price {
    font-weight: bold;
    font-size: 1rem;
    color: #000000;
  }

  .cart-items .cart-item .cart-flex .quantity-selector input {
    text-align: center;
    border: 1px solid rgba(0,0,0,0.1);
    width: 15%;
    font-size: 14px;
  }

  .cart-items .cart-item .cart-flex .quantity-selector button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 30px;
    height: 30px;
    border: 1px solid rgba(0,0,0,0.1);
    background-color: #ffffff;
  }
  
  .cart-footer {
    background-color: #f2f2f2;
    padding: 15px 0;
    z-index: 100;
    position: relative;
  }

  .cart-footer.sticky {
    bottom: 0;
    position: fixed;
    width: 100%;
    z-index: 100;
  }

  .cart-footer p {
    text-align: center;
  }

  .cart-footer .flex{
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 2rem;
    color: #000000;
  }

  .cart-footer .s-total {
    padding: 0;
    font-weight: 700;
  }

  .cart-footer .cart-total {
    font-weight: 700;
  }

  .cart-footer .btn {
      width: 93%;
      padding: 1.5rem;
      height: auto;
      display: block;
      margin: auto;
      text-transform: uppercase;
      font-weight: 700;
  }

  .cart-footer .shipping-cost {
    font-family: 'DM Sans', sans-serif;
    text-transform: uppercase;
    font-size: 12px;
    color: #abaaaa;
    font-weight: 600;
    letter-spacing: 0.4;
  }

  .cart-flex {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
  }

  .cart-flex .item-remove {
    position: absolute;
    top: -9px;
    right: 16px;
    border: none;
    background: #fff;
    transition: all 0.5s linear;
  }

  .cart-flex .item-remove svg path {
    transition: all 0.5s linear;
  }

  .cart-flex .item-remove:hover svg path {
    fill: unset;
  }
  .cart-flex .item-remove:hover svg {
    width: 11px;
  }
  
  .close-btn {
    position: absolute;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    cursor: pointer;
    background: #eee;
    padding: 5px 10px;
    border-radius: 50%;
  }

  .close-btn:hover svg path {
    fill: unset;
  }

  .btn {
      display: inline-block;
      padding: 10px 20px;
      background-color: #333;
      color: white;
      text-decoration: none;
      border-radius: 5px;
      margin-top: 10px;
      background-color: rgb(255, 72, 72);
  }
</style>
